#!/usr/bin/env python3
"""
Blockchain Backdoor Exploitation Demo
=====================================

This script demonstrates how the identified backdoors could be exploited
for educational purposes in a controlled environment.

WARNING: For educational/testing purposes only!
"""

import subprocess
import time
import json
import sys
from datetime import datetime

class BlockchainExploitDemo:
    def __init__(self):
        self.bitcoin_cli = "./src/bitcoin-cli -regtest"
        self.vulnerable_ranges = [
            (112266, 112300, "Maximum difficulty (easiest)"),
            (112301, 112401, "Custom pownewlimit (very easy)")
        ]
        
    def run_command(self, cmd):
        """Execute a command and return the result"""
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                return None
        except Exception as e:
            print(f"Error running command: {e}")
            return None
    
    def get_blockchain_info(self):
        """Get current blockchain information"""
        info = self.run_command(f"{self.bitcoin_cli} getblockchaininfo")
        if info:
            return json.loads(info)
        return None
    
    def get_block_height(self):
        """Get current block height"""
        height = self.run_command(f"{self.bitcoin_cli} getblockcount")
        return int(height) if height else 0
    
    def get_difficulty(self):
        """Get current difficulty"""
        diff = self.run_command(f"{self.bitcoin_cli} getdifficulty")
        return float(diff) if diff else 0.0
    
    def mine_blocks(self, count):
        """Mine specified number of blocks"""
        result = self.run_command(f"{self.bitcoin_cli} generate {count}")
        return result is not None
    
    def create_transaction(self, amount=1.0):
        """Create a test transaction"""
        # Get a new address
        address = self.run_command(f"{self.bitcoin_cli} getnewaddress")
        if not address:
            return None
            
        # Send coins to the address
        txid = self.run_command(f"{self.bitcoin_cli} sendtoaddress {address} {amount}")
        return txid
    
    def demonstrate_difficulty_manipulation(self):
        """Demonstrate the difficulty manipulation backdoor"""
        print("🎯 DEMONSTRATING DIFFICULTY MANIPULATION BACKDOOR")
        print("=" * 60)
        
        current_height = self.get_block_height()
        print(f"Current block height: {current_height}")
        
        # Check if we're in a vulnerable range
        in_vulnerable_range = False
        current_range = None
        
        for start, end, desc in self.vulnerable_ranges:
            if start <= current_height <= end:
                in_vulnerable_range = True
                current_range = (start, end, desc)
                break
        
        if in_vulnerable_range:
            print(f"🚨 CURRENTLY IN VULNERABLE RANGE: {current_range[2]}")
            print(f"   Blocks {current_range[0]}-{current_range[1]}")
        else:
            print("✅ Currently outside vulnerable ranges")
        
        print(f"Current difficulty: {self.get_difficulty()}")
        print()
        
        # Demonstrate mining speed difference
        print("⏱️  MINING SPEED TEST:")
        print("-" * 30)
        
        # Mine 3 blocks and measure time
        start_time = time.time()
        if self.mine_blocks(3):
            end_time = time.time()
            duration = end_time - start_time
            print(f"Mined 3 blocks in {duration:.2f} seconds ({duration/3:.2f} sec/block)")
            
            new_height = self.get_block_height()
            new_difficulty = self.get_difficulty()
            print(f"New height: {new_height}")
            print(f"New difficulty: {new_difficulty}")
            
            if in_vulnerable_range:
                print("🚨 This mining speed is artificially fast due to backdoor!")
            else:
                print("ℹ️  Normal mining speed (outside vulnerable range)")
        else:
            print("❌ Failed to mine blocks")
        
        print()
    
    def demonstrate_double_spend_setup(self):
        """Demonstrate setup for a potential double-spend attack"""
        print("💰 DEMONSTRATING DOUBLE-SPEND ATTACK SETUP")
        print("=" * 60)
        
        current_height = self.get_block_height()
        print(f"Current block height: {current_height}")
        
        # Check if we're approaching a vulnerable range
        next_vulnerable = None
        for start, end, desc in self.vulnerable_ranges:
            if current_height < start:
                next_vulnerable = (start, end, desc)
                break
        
        if next_vulnerable:
            blocks_until_vulnerable = next_vulnerable[0] - current_height
            print(f"Next vulnerable range: blocks {next_vulnerable[0]}-{next_vulnerable[1]}")
            print(f"Blocks until vulnerable: {blocks_until_vulnerable}")
            print(f"Description: {next_vulnerable[2]}")
            
            if blocks_until_vulnerable <= 10:
                print("🚨 APPROACHING VULNERABLE RANGE!")
                print("   An attacker could prepare for exploitation now")
            
        else:
            print("ℹ️  All vulnerable ranges have passed")
        
        print()
        print("📋 DOUBLE-SPEND ATTACK SCENARIO:")
        print("1. Create transaction sending coins to victim")
        print("2. Wait for transaction to be confirmed")
        print("3. During vulnerable period, mine competing chain")
        print("4. In competing chain, send same coins elsewhere")
        print("5. Publish longer competing chain")
        print("6. Original transaction is reversed (double-spend successful)")
        print()
        
        # Create a demonstration transaction
        print("Creating demonstration transaction...")
        txid = self.create_transaction(1.0)
        if txid:
            print(f"Created transaction: {txid}")
            print("In a real attack, this would be the transaction to reverse")
        else:
            print("❌ Failed to create transaction (may need more funds)")
        
        print()
    
    def analyze_network_vulnerability(self):
        """Analyze current network vulnerability status"""
        print("🔍 NETWORK VULNERABILITY ANALYSIS")
        print("=" * 60)
        
        blockchain_info = self.get_blockchain_info()
        if not blockchain_info:
            print("❌ Failed to get blockchain info")
            return
        
        current_height = blockchain_info.get('blocks', 0)
        difficulty = blockchain_info.get('difficulty', 0)
        
        print(f"Current Status:")
        print(f"  Height: {current_height}")
        print(f"  Difficulty: {difficulty}")
        print(f"  Chain: {blockchain_info.get('chain', 'unknown')}")
        print()
        
        # Analyze vulnerability windows
        print("🚨 VULNERABILITY WINDOWS:")
        total_vulnerable_blocks = 0
        
        for start, end, desc in self.vulnerable_ranges:
            block_count = end - start + 1
            total_vulnerable_blocks += block_count
            
            if current_height < start:
                status = f"UPCOMING (in {start - current_height} blocks)"
            elif start <= current_height <= end:
                status = f"ACTIVE NOW! ({end - current_height} blocks remaining)"
            else:
                status = "PASSED"
            
            print(f"  Blocks {start}-{end}: {desc}")
            print(f"    Status: {status}")
            print(f"    Duration: {block_count} blocks")
            print()
        
        print(f"Total vulnerable blocks: {total_vulnerable_blocks}")
        vulnerability_percentage = (total_vulnerable_blocks / 1000000) * 100  # Assuming ~1M blocks total
        print(f"Network vulnerability: ~{vulnerability_percentage:.3f}% of blockchain lifetime")
        print()
        
        # Calculate attack feasibility
        print("⚔️  ATTACK FEASIBILITY:")
        if any(start <= current_height <= end for start, end, _ in self.vulnerable_ranges):
            print("🚨 HIGH - Currently in vulnerable period!")
            print("   - Minimal resources needed for 51% attack")
            print("   - Double-spend attacks highly feasible")
            print("   - Chain reorganization possible with standard hardware")
        else:
            print("🟡 MEDIUM - Outside vulnerable periods")
            print("   - Standard Bitcoin-level security applies")
            print("   - Attacks require significant resources")
            print("   - Vulnerability windows are predictable")
        
        print()
    
    def demonstrate_resource_requirements(self):
        """Demonstrate the reduced resource requirements during vulnerable periods"""
        print("💻 RESOURCE REQUIREMENT ANALYSIS")
        print("=" * 60)
        
        current_height = self.get_block_height()
        current_difficulty = self.get_difficulty()
        
        print(f"Current difficulty: {current_difficulty}")
        
        # Standard Bitcoin difficulty for comparison
        standard_difficulty = 1.0  # Normalized
        
        # Calculate resource reduction
        if current_difficulty < standard_difficulty:
            reduction_factor = standard_difficulty / current_difficulty
            print(f"Difficulty reduction factor: {reduction_factor:.2f}x easier")
            print()
            
            print("📊 ESTIMATED RESOURCE REQUIREMENTS:")
            print("Normal Bitcoin network:")
            print("  - Thousands of ASIC miners")
            print("  - Megawatts of electricity")
            print("  - Millions of dollars in hardware")
            print()
            
            print("During vulnerable periods:")
            if reduction_factor > 1000:
                print("  - Single modern CPU sufficient")
                print("  - Household electricity usage")
                print("  - Under $1000 in hardware")
            elif reduction_factor > 100:
                print("  - Small GPU mining rig")
                print("  - Modest electricity usage")
                print("  - Under $10,000 in hardware")
            else:
                print("  - Reduced but still significant resources needed")
            
            print(f"  - {reduction_factor:.0f}x less computational power needed")
        else:
            print("Currently at standard difficulty levels")
        
        print()
    
    def run_full_demonstration(self):
        """Run the complete exploitation demonstration"""
        print("🔥 BLOCKCHAIN BACKDOOR EXPLOITATION DEMONSTRATION")
        print("=" * 70)
        print(f"Started at: {datetime.now()}")
        print("WARNING: For educational purposes only!")
        print()
        
        # Check if bitcoind is running
        if not self.run_command("pgrep -f 'bitcoind.*regtest'"):
            print("❌ bitcoind not running in regtest mode")
            print("Please start bitcoind with: ./src/bitcoind -regtest -daemon")
            return False
        
        try:
            self.analyze_network_vulnerability()
            self.demonstrate_difficulty_manipulation()
            self.demonstrate_resource_requirements()
            self.demonstrate_double_spend_setup()
            
            print("✅ DEMONSTRATION COMPLETED")
            print("=" * 70)
            print("🎓 EDUCATIONAL TAKEAWAYS:")
            print("1. Consensus rule modifications can create severe vulnerabilities")
            print("2. Backdoors can be subtle but have massive security implications")
            print("3. Code auditing is critical for blockchain security")
            print("4. Predictable vulnerability windows are especially dangerous")
            print()
            print("🚨 SECURITY REMINDER:")
            print("These vulnerabilities make the network unsuitable for production use!")
            
        except KeyboardInterrupt:
            print("\n⏹️  Demonstration interrupted by user")
        except Exception as e:
            print(f"❌ Error during demonstration: {e}")
        
        return True

def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("Blockchain Backdoor Exploitation Demo")
        print("Usage: python3 exploit_demo.py")
        print()
        print("This script demonstrates the identified backdoors in the blockchain")
        print("implementation. Make sure bitcoind is running in regtest mode:")
        print("  ./src/bitcoind -regtest -daemon")
        return
    
    demo = BlockchainExploitDemo()
    demo.run_full_demonstration()

if __name__ == "__main__":
    main()